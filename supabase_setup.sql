-- 1. Create a table for public chat rooms
create table if not exists chats (
  id text not null primary key,
  name text not null,
  description text,
  webhook_url text
);

comment on table chats is 'Stores public information about each chat room.';
comment on column chats.id is 'A unique identifier for the chat, e.g., "general", "support-tech"';


-- 2. Create a table for user permissions in chats
create table if not exists user_chat_permissions (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  chat_id text references chats(id) not null,
  has_access boolean default true not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, chat_id)
);

comment on table user_chat_permissions is 'Manages which user has access to which chat room.';


-- 3. Create a table for messages
create table if not exists messages (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  content text not null,
  user_id uuid references auth.users not null,
  chat_id text references chats(id) not null
);

comment on table messages is 'Stores all messages for all chat rooms.';


-- 4. Insert some sample chat rooms
insert into chats (id, name, description)
values
  ('general', 'Chat General', 'Conversaciones sobre temas generales.'),
  ('support', 'Chat de Soporte', 'Resolución de dudas y problemas técnicos.'),
  ('project-x', 'Proyecto X', 'Discusiones del equipo sobre el Proyecto X.')
on conflict (id) do nothing;


-- 5. Set up Row Level Security (RLS) for the tables

-- Enable RLS for all three tables
alter table chats enable row level security;
alter table user_chat_permissions enable row level security;
alter table messages enable row level security;


-- Create policies for 'chats' table
-- Allow authenticated users to read all chats.
create policy "Allow read access to all authenticated users" on chats
  for select using (auth.role() = 'authenticated');


-- Create policies for 'user_chat_permissions' table
-- Allow users to read their own permissions.
create policy "Allow users to read their own permissions" on user_chat_permissions
  for select using (auth.uid() = user_id);
  
-- Allow service_role (admins from the server) to manage all permissions.
create policy "Allow admin full access" on user_chat_permissions
  for all using (auth.role() = 'service_role');


-- Create policies for 'messages' table
-- Allow users to read messages only in chats they have access to.
create policy "Allow read access to users with permission" on messages
  for select using (
    exists (
      select 1 from user_chat_permissions
      where user_chat_permissions.chat_id = messages.chat_id
      and user_chat_permissions.user_id = auth.uid()
      and user_chat_permissions.has_access = true
    )
  );

-- Allow users to insert messages only in chats they have access to.
create policy "Allow insert access to users with permission" on messages
  for insert with check (
    auth.uid() = user_id and
    exists (
      select 1 from user_chat_permissions
      where user_chat_permissions.chat_id = messages.chat_id
      and user_chat_permissions.user_id = auth.uid()
      and user_chat_permissions.has_access = true
    )
  );
